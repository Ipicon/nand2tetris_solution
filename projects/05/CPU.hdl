// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // breakthrough of instruction
    // [15] - op code
    // [14 - 13] - nothing
    // [12] - A or M
    // [11 - 6] command to ALU
    // [5] - A reg out
    // [4] - D reg out
    // [3] - writeM
    // [2 - 0] - jump dest

    PARTS:
    // choose what to transfer to the A reg
    Mux16(a=instruction, b=outA, sel=instruction[15], out=outRegA);

    // choose wheter to store in the A reg
    // if A op or A reg out
    Not(in=instruction[15], out=isAOp);
    Or(a=isAOp, b=instruction[5], out=loadA);
    ARegister(in=outRegA, load=loadA, out=inA, out=outAPC, out[0..14]=addressM);

    // handle choosing either to send A or M
    Mux16(a=inA, b=inM, sel=instruction[12], out=inAM);

    // handle D reg
    // can write to D only in C op and D reg is on
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outD, load=loadD, out=inD);

    // hadle write M
    // can write to M only in C op and M reg is on
    And(a=instruction[15], b=instruction[3], out=writeM);

    // x is always D
    // y is either A or M
    ALU(x=inD, 
        y=inAM, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7], 
        no=instruction[6], 
        out=outM, 
        out=outD,
        out=outA,
        zr=zr, 
        ng=ng);

    // handle PC logic
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    // get positive
    And(a=notZr, b=notNg, out=ps);

    // j1 - negative
    // j2 - zero
    // j3 - positive
    And(a=instruction[2], b=ng, out=isNg);
    And(a=instruction[1], b=zr, out=isZero);
    And(a=instruction[0], b=ps, out=isPos);

    // load and inc always oppositie to each other
    // load can happen only in C op
    Or(a=isNg, b=isZero, out=halfLoad);
    Or(a=halfLoad, b=isPos, out=fullLoad);
    And(a=fullLoad, b=instruction[15], out=load);
    Not(in=load, out=inc);

    PC(in=outAPC, load=load, inc=inc, reset=reset, out[0..14]=pc);
}